note="*"*50 + "\nNOTE:-\tThis syntax checker is not perfect.\n\
\tFile or variable names do not include special characters.\
\tUse only double quotes not single quotes.\n\
\tDo not place brackets special characters that are tokens inside quotes.\n\
" + "*"*50
print(note)

def removeExtra():
	while len(index)>0:
		text.pop(index.pop())
def showError(txt):
	print("")
	print("X"*25)
	print(txt)
	print("")
	exit(-1)

# function to check if the function or variable name is valid
def isValidName(txt):
	# underscore, not at start
	# rest alphaNum or underscore
	if not text[0].isalnum():
		return false
	for i in range[1:len(txt)]
		if (not text[0].isalnum()) or (not text[0]=='_'):
			return false
	return true 

# function to check funcition call

def isFileName(txt):
	txts=txt.split(".")
	for i in range(len(txts)):
		if(not txts[i].isalnum()):
			return 0
	return 1

dType = ["int", "char", "float", "double", "void"]
preWords = ["include", "define"]
moreTokens = ["(", ")", "{", "}"]
index = []

fileObj  = open("hello.c", "r")

# moving braces to different lines
x="\n{\n"
st = x.join(fileObj.read().split("{"))
x="\n}\n"
st = x.join(st.split("}"))
# all statements in differnt lines
x=";\n"
st = x.join(st.split(";"))
# removing tabs
x=""
st = x.join(st.split("\t"))

text = st.split("\n")

for i in range(len(text)):
	text[i] = text[i].strip()	
	if text[i]=="":
		index.append(i)
removeExtra()

# time to get in the game...
print("... Processing ...")

# comments
print("removing comments...")
flag=0
sFlag=0
for i in range(len(text)):
	# single line comments
	if text[i].startswith("//"):
		index.append(i)
	# multiline comments	
	if flag==0:
		if text[i].startswith("/*"):
			flag=1
	if flag==1:
		index.append(i)
		if text[i].endswith("*/"):
			flag=0		
removeExtra()

# brackets order check
print("checking bracket order...")
stack = []
s = ""

s=s.join(text)
#print(s)
pushChars, popChars = '<({[', '>)}]'
quotes= ["'", '"']
for c in s:
	if c in pushChars :
		stack.append(c)
	elif c in popChars :
		if not len(stack) :
			showError("incorrect brackets or quotes placement")
		else :
			stackTop = stack.pop()
			balancingBracket = pushChars[popChars.index(c)]
			if stackTop != balancingBracket :
				showError("incorrect brackets or quotes placement")
	elif c in quotes:
		stackTop = stack.pop()
		if not stackTop in quotes:
			stack.append(stackTop)
			stack.append(c)
		elif not stackTop==c:
			stack.append(stackTop)
			stack.append(c)
		elif stackTop==c:
			continue
			
if not len(stack)==0 :
	showError("incorrect brackets or quotes placement")
# preprocessor
print("processing the preprocessor...")
for i in range(len(text)):
	if text[i].startswith("#"):
		index.append(i)
		
		preTerms = text[i][1:].split("<")
		#print(preTerms[1])
		if(not len(preTerms) == 2):
			showError("Incorrect preprocessor terms.")
		if(not preTerms[0] in preWords):
			showError("Incorrect preprocessor terms.")
		if(not preTerms[1].endswith(">")):
			showError("Incorrect preprocessor terms.")
		if(not isFileName(preTerms[1].split(">")[0])):
			showError("Incorrect filename specified in the preprocessor")

removeExtra()


# the main function
print("the job with the main function...")
mainFlag=0
for i in range(len(text)):
	if "main()" in text[i]:
		mainFlag=1
		index.append(i)
		txt=text[i].split(" ")
		if(not txt[txt.index("main()")-1] in dType):
			mainFlag=-1
		if(not text[i+1]=='{'):
			showError("'{' expected after main()")
		
# the main() function
# checks if main() exists
if(mainFlag==0):
	showError("No main() function. I don't know where to start!")
# checks data type for main() function
elif(mainFlag==-1):
	showError("Incorrect data type assigned to main function")
removeExtra()

# brackets for a function
# statements
print("statement check...")
for i in range(len(text)):
	if(not text[i] in moreTokens and not text[i].endswith(";")):
		showError("Statement not terminated properly.")

for i in range(len(text)):
	if "{" in text[i] or "}" in text[i]:
		index.append(i)
removeExtra()

print("checking function call...")
# function call
for i in range(len(text)):
	if "(" in text[i] and ")" in text[i]:
		t=text[i].split('(')[0].lstrip()
		if not t.isalnum():
			showError("Incorrect function call")
print("done.")
# print(text)
print("\nLOOKS GOOD! YOU ARE GOOD TO GO.")

